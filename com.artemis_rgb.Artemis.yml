id: com.artemis_rgb.Artemis
runtime: org.freedesktop.Platform
runtime-version: &runtime-version '24.08'
sdk: org.freedesktop.Sdk
sdk-extensions:
  - org.freedesktop.Sdk.Extension.dotnet9
build-options:
  prepend-path: /usr/lib/sdk/dotnet9/bin
  append-ld-library-path: /usr/lib/sdk/dotnet9/lib
  prepend-pkg-config-path: /usr/lib/sdk/dotnet9/lib/pkgconfig
command: run.sh

finish-args:
  # TODO: Replace this with wayland and fallback-x11 once Wayland support
  #       becomes available:
  #       https://github.com/AvaloniaUI/Avalonia/pull/8003
  - --socket=x11
  - --device=dri
  - --share=ipc
  - --share=network
  - --env=DOTNET_ROOT=/app/lib/dotnet
# Pass in full session bus access due to Avalonia being wacky about creating tray icons.
  - --socket=session-bus
# Allow access to appindicator icons
  - --talk-name=org.kde.StatusNotifierWatcher
  - --talk-name=com.canonical.AppMenu.Registrar
modules:
  - shared-modules/libusb/libusb.json
  - name: libhidapi
    buildsystem: cmake-ninja
    sources:
      - type: git
        url: https://github.com/libusb/hidapi.git
        tag: hidapi-0.14.0
        commit: d3013f0af3f4029d82872c1a9487ea461a56dee4
        x-checker-data:
          type: json
          url: https://api.github.com/repos/libusb/hidapi/releases/latest
          tag-query: .tag_name
          timestamp-query: .published_at
  - name: wooting-analog-sdk
    buildsystem: simple
    only-arches:
      - x86_64
    build-commands:
      - install -Dm755 wrapper/sdk/libwooting_analog_sdk.so "${FLATPAK_DEST}/lib/libwooting_analog_sdk.so"
    sources:
      - type: archive
        url: 
          https://github.com/WootingKb/wooting-analog-sdk/releases/download/v0.8.0/wooting-analog-sdk-v0.8.0-x86_64-unknown-linux-gnu.tar.gz
        sha512: 
          bb93460de0ad4096ba160469945f2ba0a35a081b604627059905a48f5d73ac68488fa568b9d7980be46778aa5be79ae3cb164f000c0c5f67cce29f4b45128663
        strip-components: 0
        x-checker-data:
          type: json
          url: https://api.github.com/repos/WootingKb/wooting-analog-sdk/releases/latest
          version-query: .tag_name
          url-query: .assets[] | select(.name|endswith("x86_64-unknown-linux-gnu.tar.gz"))
            | .browser_download_url
  - name: dotnet
    buildsystem: simple
    build-commands:
      - /usr/lib/sdk/dotnet9/bin/install.sh
  - name: artemis
    buildsystem: simple
    build-commands:
      - |
        # Set variables for output and build directories to be used later
        PluginBuildDir="build/build-plugins"
        StagingDir="build/build-artemis"
        PluginStagingDir="$StagingDir/Plugins"

        # Create build output and staging directories.
        mkdir -p "$PluginBuildDir" "$StagingDir" "$PluginStagingDir"

        function GetVersion {
            # Attempt to recreate 'version' job step from gh-actions branch workflow:
            # https://github.com/Artemis-RGB/Artemis/blob/feature/gh-actions/.github/workflows/nuget.yml
            
            # Find the Artemis.Core.csproj file (adjust path if necessary)
            CoreProjFile=$(find "Artemis/src" -type f -name "Artemis.Core.csproj")
            
            # Change into the 'Artemis' directory where the git repository is located
            pushd "Artemis" > /dev/null

            # Get the branch name and replace '/' and '.' with '-'
            BranchName=$(git rev-parse --abbrev-ref HEAD | sed 's/[\/.]/-/g')

            # Get the date of the most recent commit in ISO 8601 format
            LatestCommitDate=$(git log -1 --format=%cd --date=iso-strict)

            # Extract just the date part (YYYY-MM-DD)
            LatestCommitDateOnly=$(echo "$LatestCommitDate" | cut -d'T' -f1)

            # Set MidnightUtc to midnight of the latest commit date
            MidnightUtc="${LatestCommitDateOnly}T00:00:00Z"

            # Set EndOfDayUtc to the end of the latest commit date
            EndOfDayUtc="${LatestCommitDateOnly}T23:59:59Z"

            # Calculate the number of commits on that date
            NumberOfCommitsToday=$(git rev-list --count --since="$MidnightUtc" --until="$EndOfDayUtc" HEAD)

            # Return to the previous directory
            popd > /dev/null

            # Format the date part as yyyy.MMdd based on the latest commit date
            DatePart=$(date -u -d "$LatestCommitDateOnly" +"%Y.%m%d")

            # Extract ApiVersion from the csproj file
            ApiVersion=$(grep -oP '(?<=<PluginApiVersion>).*?(?=</PluginApiVersion>)' "$CoreProjFile")

            # Construct the VersionNumber
            VersionNumber="$ApiVersion.$DatePart.$NumberOfCommitsToday"

            # If the branch name is not 'master' or 'HEAD', append it to the VersionNumber
            if [ "$BranchName" != "master" ] && [ "$BranchName" != "HEAD" ]; then
                VersionNumber="$VersionNumber-$BranchName"
            fi

            # Export the VersionNumber for use in build commands
            export VersionNumber
        }

        # Build Artemis UI component
        GetVersion
        UIProjFile=$(find "Artemis/src" -type f -name "Artemis.UI.Linux.csproj")
        dotnet publish --configuration Release -p:Version="$VersionNumber" --source ./nuget-sources --output "$StagingDir" --no-self-contained "$UIProjFile"

        # Search for all plugin projects
        PluginProjects=$(find "Artemis.Plugins/src" -type f -name "*.csproj")

        # Function to build a single plugin
        build_plugin() {
            PluginProjFile="$1"
            Name=$(basename -s .csproj "$PluginProjFile")
            
            echo "Building Plugin $Name"
            Output="$PluginBuildDir/$Name"
            mkdir -p "$Output"
            
            # Build the plugin
            dotnet publish --configuration Release -p:Version="$VersionNumber" --source ./nuget-sources --output "$Output" --no-self-contained "$PluginProjFile"
            
            # Zip seems to fail to package some of the files, so we use bsdtar instead
            bsdtar -a -cf "$PluginStagingDir/$Name.zip" -C "$Output" .
            
            echo "Finished Building Plugin $Name"
        }

        # Export the function and variables if needed
        export -f build_plugin
        export PluginBuildDir StagingDir PluginStagingDir VersionNumber

        # Initialize a counter for background jobs
        MAX_JOBS="$(nproc --all)"  # Adjust this number based on your CPU cores
        current_jobs=0

        for PluginProjFile in $PluginProjects; do
            build_plugin "$PluginProjFile" &
            ((current_jobs+=1))
            
            # If the number of background jobs reaches MAX_JOBS, wait for any to finish
            if [[ "$current_jobs" -ge "$MAX_JOBS" ]]; then
                wait -n
                ((current_jobs-=1))
            fi
        done

        # Wait for all remaining background jobs to finish
        wait

        # Continue with the rest of your script
        # Install Metainfo and desktop files
        install -Dm644 com.artemis_rgb.Artemis.metainfo.xml "${FLATPAK_DEST}/share/metainfo/${FLATPAK_ID}.metainfo.xml"
        install -Dm644 com.artemis_rgb.Artemis.desktop "${FLATPAK_DEST}/share/applications/${FLATPAK_ID}.desktop"

        # Extract and install icons of various sizes
        pushd "$StagingDir/Icons" > /dev/null
        for size in 16x16 32x32 48x48 64x64 128x128 256x256; do
            install -Dm644 "$size/apps/artemis.png" "${FLATPAK_DEST}/share/icons/hicolor/$size/apps/${FLATPAK_ID}.png"
        done
        popd > /dev/null

        # Set executable bit on Artemis binary
        chmod +x "$StagingDir/Artemis.UI.Linux"

        # Install files to Flatpak staging folder.
        cp -r --remove-destination "$StagingDir/." "${FLATPAK_DEST}/bin"

        # Install Flatpak specific wrapper
        install -Dm755 run.sh "${FLATPAK_DEST}/bin/run.sh"
    sources:
      - type: script
        dest-filename: run.sh
        commands:
          - /app/bin/Artemis.UI.Linux --channel=none "$@"
      - type: file
        path: com.artemis_rgb.Artemis.desktop
      - type: file
        path: com.artemis_rgb.Artemis.metainfo.xml
      - type: git
        url: https://github.com/Artemis-RGB/Artemis.git
        commit: acd35176e1c6661a887e467ef4b294eddb532726
        dest: Artemis
        disable-shallow-clone: true
      - type: git
        url: https://github.com/Artemis-RGB/Artemis.Plugins.git
        commit: 5d2fe3d028c24b5cc78fc748b431ed1b984b3cd4
        dest: Artemis.Plugins
        disable-shallow-clone: true
      - artemis-sources.json
      - artemis-plugins-sources.json
